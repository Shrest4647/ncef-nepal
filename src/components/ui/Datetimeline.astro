---
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import type { Event } from '~/types';
import Image from '~/components/common/Image.astro';

export interface Props {
  items?: Array<Event>;
  defaultIcon?: string;
  classes?: Record<string, string>;
}

const { items = [], classes = {}, defaultIcon } = Astro.props as Props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary dark:text-slate-200 border-primary dark:border-blue-700',
} = classes;
---

{
  items && items.length && (
    <div class={containerClass}>
      {items.map(
        (
          {
            title,
            description,
            icon,
            classes: itemClasses = {},
            date,
            image,
            location,
            duration,
            status,
            badge,
            badgeColor,
            href,
          },
          index = 0
        ) => (
          <div class={twMerge('flex', panelClass, itemClasses?.panel)}>
            <div class="flex flex-col items-center mr-4 rtl:mr-0 rtl:ml-4">
              <div>
                {date && (
                  <div
                    class={twMerge(
                      'flex items-center justify-center w-[60px] h-[60px] p-2 rounded-full border-2',
                      defaultIconClass,
                      itemClasses?.icon
                    )}
                  >
                    {date.getDate() + '/' + (date.getMonth() + 1)}
                  </div>
                )}
              </div>
              {index !== items.length - 1 && <div class="w-px h-full bg-black/10 dark:bg-slate-400/50" />}
            </div>
            <div class:list={['pt-1 w-full', { 'pb-8': index !== items.length - 1 }]}>
              <div class="flex items-center">
                {title && <p class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)} set:html={title} />}
                {(icon || defaultIcon) && (
                  <Icon
                    name={icon || defaultIcon}
                    class={twMerge('w-10 h-10 p-2', defaultIconClass, itemClasses?.icon)}
                  />
                )}
                {badge && (
                  <div class={twMerge('px-2 py-1 rounded-full border-2 bg-green-200', `bg-${badgeColor}`)}>{badge}</div>
                )}
                {status && <div class={twMerge('px-2 py-1 rounded-full border-2')}>{status}</div>}
              </div>
              <div class="grid grid-cols-2 min-h-[10rem] gap-4 max-w-2xl">
                <div class="col-span-1">
                  {date && (
                    <div class="flex gap-2 items-center">
                      <Icon
                        name="tabler:calendar"
                        class={twMerge('w-8 h-8 p-2', defaultIconClass, itemClasses?.icon)}
                      />
                      <p
                        class={twMerge('text-md mt-2', descriptionClass, itemClasses?.description)}
                        set:html={date.toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric',
                        })}
                      />
                    </div>
                  )}
                  {duration && (
                    <div class="flex gap-2 items-center">
                      <Icon name="tabler:clock" class={twMerge('w-8 h-8 p-2', defaultIconClass, itemClasses?.icon)} />
                      <p class={twMerge('text-md', descriptionClass, itemClasses?.description)} set:html={duration} />
                    </div>
                  )}

                  {location && (
                    <div class="flex gap-2 items-center">
                      <Icon name="tabler:map" class={twMerge('w-8 h-8 p-2', defaultIconClass, itemClasses?.icon)} />

                      <a class='text-md' set:html={location} href={href}/>
                    </div>
                  )}
                  {description && (
                    <p
                      class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)}
                      set:html={description}
                    />
                  )}
                </div>
                <div class="col-span-1">
                  {image && (
                    <div class="relative h-full">
                      {typeof image === 'string' ? (
                        <Fragment set:html={image} />
                      ) : (
                        <Image
                          class="inset-0 object-cover object-top w-full rounded-md shadow-lg md:absolute md:h-full bg-gray-400 dark:bg-slate-700"
                          widths={[400, 768]}
                          sizes="(max-width: 768px) 100vw, 432px"
                          width={432}
                          height={768}
                          layout="cover"
                          src={image?.src}
                          alt={image?.alt || ''}
                        />
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        )
      )}
    </div>
  )
}
